name: 完整持续集成 (禁用)

on:
  # 仅在手动触发且提供特定密钥时运行
  workflow_dispatch:
    inputs:
      run_key:
        description: '运行密钥'
        required: true

jobs:
  # 添加条件使其永远不会运行
  test:
    if: github.event.inputs.run_key == 'special_run_key_20231231'
    runs-on: ubuntu-latest

  lint:
    name: 代码检查
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 运行代码检查
        working-directory: ./backend
        run: yarn lint

  build:
    name: 构建
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 构建项目
        working-directory: ./backend
        run: yarn build

  unit-test:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: |
          yarn install --frozen-lockfile
          yarn add --dev @babel/plugin-transform-modules-commonjs
          yarn list @babel/plugin-transform-modules-commonjs

      - name: 检查配置文件
        working-directory: ./backend
        run: |
          ls -la
          echo "创建 babel.config.js"
          echo 'module.exports = {
            presets: [
              ["@babel/preset-env", { targets: { node: "current" } }],
              "@babel/preset-typescript",
            ],
            plugins: [
              "@babel/plugin-transform-modules-commonjs",
            ],
          };' > babel.config.js
          echo "创建 .babelrc"
          echo '{
            "presets": [
              ["@babel/preset-env", { "targets": { "node": "current" } }],
              "@babel/preset-typescript"
            ],
            "plugins": [
              "@babel/plugin-transform-modules-commonjs"
            ]
          }' > .babelrc
          cat babel.config.js
          cat .babelrc
          cat jest.config.cjs
          yarn list @babel/plugin-transform-modules-commonjs

      - name: 运行单元测试
        working-directory: ./backend
        run: |
          NODE_ENV=test yarn jest --config=jest.config.cjs --no-cache
        env:
          NODE_ENV: test

      - name: 上传单元测试报告
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-report
          path: backend/coverage/

  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: unit-test

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 运行集成测试
        working-directory: ./backend
        run: |
          NODE_ENV=test yarn jest --testMatch="**/tests/integration/**/*.test.ts" --config=jest.config.cjs --forceExit
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/chainIntelAI_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: 上传集成测试报告
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: backend/coverage/

  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 运行性能测试
        working-directory: ./backend
        run: |
          NODE_ENV=test yarn jest src/tests/performance/monitoring/telemetry-performance.test.ts --config=jest.config.cjs
        env:
          NODE_ENV: test

      - name: 上传性能测试报告
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-report
          path: backend/coverage/

  deploy:
    name: 部署
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test, performance-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 构建项目
        working-directory: ./backend
        run: yarn build

      - name: 部署到开发环境
        run: echo "部署到开发环境"
        # 这里添加实际的部署命令
