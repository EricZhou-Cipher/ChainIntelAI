name: 测试与覆盖率分析

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: 运行测试与覆盖率分析
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 运行测试
        working-directory: ./backend
        run: yarn test --coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/chainIntelAI_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: 分析低覆盖率代码
        run: node src/utils/fixLowCoverage.js --coverage-dir=./coverage --min-coverage=80 --report --output=./coverage-report.md

      - name: 生成详细覆盖率分析报告
        run: |
          node src/utils/analyzeCoverage.js --coverage-dir=./coverage --min-coverage=80 --detailed --trend --format=html --output=./coverage-analysis.html
          node src/utils/analyzeCoverage.js --coverage-dir=./coverage --min-coverage=80 --detailed --trend --format=markdown --output=./coverage-analysis.md

      - name: 上传覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage/
            coverage-report.md
            coverage-analysis.html
            coverage-analysis.md

      - name: 检查覆盖率阈值
        run: |
          TOTAL_COVERAGE=$(node -e "const fs=require('fs'); const summary=JSON.parse(fs.readFileSync('./coverage/coverage-summary.json')); console.log(summary.total.lines.pct);")
          echo "总行覆盖率: $TOTAL_COVERAGE%"
          if (( $(echo "$TOTAL_COVERAGE < 80" | bc -l) )); then
            echo "警告: 总行覆盖率低于80%"
            exit 1
          fi

      - name: 发送通知
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-notifications
          SLACK_TITLE: 测试与覆盖率分析结果
          SLACK_MESSAGE: |
            分支: ${{ github.ref }}
            提交: ${{ github.sha }}
            状态: ${{ job.status }}
          SLACK_COLOR: ${{ job.status }}

  performance:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 安装Artillery
        run: npm install -g artillery

      - name: 启动应用
        run: |
          yarn start &
          sleep 10
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/chainIntelAI_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: 运行性能测试
        run: artillery run src/tests/performance/api.load.test.yml -o performance-report.json

      - name: 生成性能报告
        run: artillery report performance-report.json -o performance-report.html

      - name: 上传性能报告
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: |
            performance-report.json
            performance-report.html

  auto-fix:
    name: 自动修复低覆盖率代码
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 下载覆盖率报告
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: coverage

      - name: 自动修复低覆盖率代码
        run: node src/utils/fixLowCoverage.js --coverage-dir=./coverage --min-coverage=80 --fix

      - name: 提交修复
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "自动修复低覆盖率代码 [skip ci]" || echo "没有需要提交的更改"
          git push
