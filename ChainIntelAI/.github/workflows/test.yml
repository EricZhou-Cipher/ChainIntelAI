name: 测试与性能监控
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 0 * * 0" # 每周日午夜运行

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected_modules: ${{ steps.affected.outputs.modules }}
      cache_key: ${{ steps.cache_key.outputs.value }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史以便检测变更

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 生成缓存键
        id: cache_key
        run: |
          echo "value=node-modules-${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT

      - name: 检测受影响的模块
        id: affected
        run: |
          # 如果是PR，检测与目标分支的差异
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # 如果是推送，检测与上一次提交的差异
            BASE_SHA=$(git rev-parse HEAD~1)
            HEAD_SHA=$(git rev-parse HEAD)
          fi

          # 获取变更的文件
          CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)

          # 检测受影响的模块
          AFFECTED_MODULES=""

          if echo "$CHANGED_FILES" | grep -q "backend/src/analyzer/"; then
            AFFECTED_MODULES="$AFFECTED_MODULES analyzer"
          fi

          if echo "$CHANGED_FILES" | grep -q "backend/src/pipeline/"; then
            AFFECTED_MODULES="$AFFECTED_MODULES pipeline"
          fi

          if echo "$CHANGED_FILES" | grep -q "backend/src/database/"; then
            AFFECTED_MODULES="$AFFECTED_MODULES database"
          fi

          if echo "$CHANGED_FILES" | grep -q "backend/src/api/"; then
            AFFECTED_MODULES="$AFFECTED_MODULES api"
          fi

          if echo "$CHANGED_FILES" | grep -q "backend/src/monitoring/"; then
            AFFECTED_MODULES="$AFFECTED_MODULES monitoring"
          fi

          # 如果没有检测到特定模块变更，则测试所有模块
          if [ -z "$AFFECTED_MODULES" ]; then
            AFFECTED_MODULES="all"
          fi

          echo "modules=$AFFECTED_MODULES" >> $GITHUB_OUTPUT
          echo "受影响的模块: $AFFECTED_MODULES"

      - name: 缓存依赖
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ steps.cache_key.outputs.value }}
          restore-keys: |
            node-modules-

      - name: 安装依赖
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd backend
          yarn install --frozen-lockfile

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 运行单元测试
        run: |
          cd backend
          if [[ "${{ needs.setup.outputs.affected_modules }}" == "all" ]]; then
            yarn test:unit --coverage --maxWorkers=4
          else
            # 只测试受影响的模块
            MODULES="${{ needs.setup.outputs.affected_modules }}"
            TEST_PATTERN=""
            
            for MODULE in $MODULES; do
              if [ -n "$TEST_PATTERN" ]; then
                TEST_PATTERN="$TEST_PATTERN|"
              fi
              TEST_PATTERN="${TEST_PATTERN}src/tests/unit/$MODULE"
            done
            
            if [ -n "$TEST_PATTERN" ]; then
              yarn test --testPathPattern="($TEST_PATTERN)" --coverage --maxWorkers=4
            else
              yarn test:unit --coverage --maxWorkers=4
            fi
          fi
        env:
          MONGODB_URI: mongodb://localhost:27017/chainintel_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: 上传单元测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: backend/coverage/

  integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 运行集成测试
        run: |
          cd backend
          if [[ "${{ needs.setup.outputs.affected_modules }}" == "all" ]]; then
            yarn test:integration --maxWorkers=4
          else
            # 只测试受影响的模块
            MODULES="${{ needs.setup.outputs.affected_modules }}"
            TEST_PATTERN=""
            
            for MODULE in $MODULES; do
              if [ -n "$TEST_PATTERN" ]; then
                TEST_PATTERN="$TEST_PATTERN|"
              fi
              TEST_PATTERN="${TEST_PATTERN}src/tests/integration/$MODULE"
            done
            
            if [ -n "$TEST_PATTERN" ]; then
              yarn test --testPathPattern="($TEST_PATTERN)" --maxWorkers=4
            else
              yarn test:integration --maxWorkers=4
            fi
          fi
        env:
          MONGODB_URI: mongodb://localhost:27017/chainintel_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: 上传集成测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-coverage
          path: backend/coverage/

  e2e-tests:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 运行端到端测试
        run: |
          cd backend
          yarn test:e2e
        env:
          MONGODB_URI: mongodb://localhost:27017/chainintel_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: 上传端到端测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-coverage
          path: backend/coverage/

  performance-tests:
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史以便生成趋势报告

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 缓存Artillery测试数据
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/artillery
            backend/load-test-results
          key: artillery-${{ github.sha }}
          restore-keys: |
            artillery-

      - name: 安装Artillery
        run: |
          yarn global add artillery@latest

      - name: 启动API服务用于负载测试
        run: |
          cd backend
          yarn build
          nohup yarn start &
          sleep 10 # 等待服务启动
        env:
          MONGODB_URI: mongodb://localhost:27017/chainintel_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
          PORT: 3000

      - name: 运行负载测试
        run: |
          cd backend
          mkdir -p load-test-results
          artillery run --output load-test-results/report.json src/tests/performance/api.load.test.yml
          artillery report --output load-test-results/report.html load-test-results/report.json
        env:
          NODE_ENV: test

      - name: 上传负载测试结果
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: backend/load-test-results/

  report-generation:
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 下载所有测试结果
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: 合并覆盖率报告
        run: |
          cd backend
          mkdir -p coverage
          npx nyc merge test-artifacts/unit-test-coverage test-artifacts/integration-test-coverage test-artifacts/e2e-test-coverage coverage/coverage-final.json
          npx nyc report --reporter=lcov --reporter=text --reporter=json-summary --report-dir=coverage

      - name: 生成测试报告
        run: |
          cd backend
          node src/utils/testReporter.js --coverage-dir=./coverage --load-test-dir=../test-artifacts/load-test-results --ai-analysis=true
        env:
          NODE_ENV: test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: 上传测试报告和覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            backend/coverage/
            backend/test-report.md
            backend/test-improvement-suggestions.md

      - name: 上传测试覆盖率到Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage/
          fail_ci_if_error: true
          verbose: true

      - name: 上传性能测试结果到S3
        if: github.event_name != 'pull_request'
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "test-artifacts/load-test-results"
          DEST_DIR: "performance-reports/${{ github.sha }}"

      - name: Slack通知
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            测试结果: ${{ job.status }}
            覆盖率: $(cat backend/coverage/coverage-summary.json | jq '.total.lines.pct')%
            详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Telegram通知
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            仓库: ${{ github.repository }}
            状态: ${{ job.status }}
            提交: ${{ github.event.head_commit.message }}
            作者: ${{ github.actor }}
            覆盖率: $(cat backend/coverage/coverage-summary.json | jq '.total.lines.pct')%
            详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  performance-analysis:
    needs: [report-generation]
    if: github.event_name != 'pull_request' && success()
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史以便比较性能

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 下载测试报告
        uses: actions/download-artifact@v3
        with:
          name: test-reports
          path: reports

      - name: 下载负载测试结果
        uses: actions/download-artifact@v3
        with:
          name: load-test-results
          path: load-test-results

      - name: 分析性能数据
        run: |
          cd backend
          node src/monitoring/analyzePerformance.js --report-dir=../load-test-results --compare-with-baseline=true
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 检查性能警报
        id: check_performance
        run: |
          cd backend
          P95_LATENCY=$(cat performance-analysis.json | jq '.p95LatencyMs')
          P95_CHANGE=$(cat performance-analysis.json | jq '.p95LatencyChange')
          echo "P95延迟: $P95_LATENCY ms (变化: $P95_CHANGE%)"

          if (( $(echo "$P95_LATENCY > 500" | bc -l) )); then
            echo "performance_alert=true" >> $GITHUB_OUTPUT
            echo "alert_message=⚠️ 性能警报: P95延迟 ($P95_LATENCY ms) 超过阈值 (500 ms)" >> $GITHUB_OUTPUT
          elif (( $(echo "$P95_CHANGE > 10" | bc -l) )); then
            echo "performance_alert=true" >> $GITHUB_OUTPUT
            echo "alert_message=⚠️ 性能退化警报: P95延迟增加了 $P95_CHANGE% (当前: $P95_LATENCY ms)" >> $GITHUB_OUTPUT
          else
            echo "performance_alert=false" >> $GITHUB_OUTPUT
            echo "alert_message=✅ 性能正常: P95延迟 ($P95_LATENCY ms) 在阈值范围内，变化 $P95_CHANGE%" >> $GITHUB_OUTPUT
          fi

      - name: 性能警报通知
        if: steps.check_performance.outputs.performance_alert == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: "warning"
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ${{ steps.check_performance.outputs.alert_message }}
            详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 更新性能趋势数据
        run: |
          cd backend
          node src/monitoring/updatePerformanceTrend.js --report-dir=../load-test-results

      - name: 上传性能趋势数据到S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "backend/performance-trends"
          DEST_DIR: "performance-trends"

  regression-tests:
    needs: [performance-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史以便比较性能

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"

      - name: 恢复缓存
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/yarn
          key: ${{ needs.setup.outputs.cache_key }}

      - name: 安装Artillery
        run: |
          yarn global add artillery@latest

      - name: 下载基准测试配置
        run: |
          cd backend
          mkdir -p regression-tests
          aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/baseline-tests/baseline.yml regression-tests/baseline.yml || echo "No baseline found, using current as baseline"
          if [ ! -f regression-tests/baseline.yml ]; then
            cp src/tests/performance/api.load.test.yml regression-tests/baseline.yml
          fi
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 启动API服务用于回归测试
        run: |
          cd backend
          yarn build
          nohup yarn start &
          sleep 10 # 等待服务启动
        env:
          MONGODB_URI: mongodb://localhost:27017/chainintel_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
          PORT: 3000

      - name: 运行回归测试
        run: |
          cd backend
          mkdir -p regression-results
          artillery run --output regression-results/baseline-report.json regression-tests/baseline.yml
          artillery report --output regression-results/baseline-report.html regression-results/baseline-report.json
        env:
          NODE_ENV: test

      - name: 比较回归测试结果
        run: |
          cd backend
          node src/monitoring/compareRegressionResults.js --current-report=../load-test-results/report.json --baseline-report=regression-results/baseline-report.json
        env:
          NODE_ENV: test

      - name: 上传回归测试结果
        uses: actions/upload-artifact@v3
        with:
          name: regression-test-results
          path: |
            backend/regression-results/
            backend/regression-comparison.md

      - name: 更新基准测试配置
        if: github.ref == 'refs/heads/main'
        run: |
          cd backend
          # 如果当前测试性能更好，则更新基准
          if [ -f "regression-results/update-baseline" ]; then
            aws s3 cp src/tests/performance/api.load.test.yml s3://${{ secrets.AWS_S3_BUCKET }}/baseline-tests/baseline.yml
            echo "基准测试配置已更新"
          fi
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
