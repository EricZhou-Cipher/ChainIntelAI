name: 后端测试

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
          cache-dependency-path: backend/yarn.lock

      - name: 清理环境
        run: |
          echo "清理环境..."
          rm -rf package-lock.json yarn.lock node_modules
          rm -f babel.config.js babel.config.cjs .babelrc jest.config.js jest.config.cjs

      - name: 手动安装Babel依赖
        run: |
          echo "手动安装关键Babel依赖..."
          npm install @babel/core@7.24.0 @babel/preset-env@7.24.0 @babel/plugin-transform-modules-commonjs@7.26.3 babel-jest@29.7.0 @babel/plugin-transform-runtime@7.24.0 @babel/preset-typescript@7.23.3 --save-dev
          npm install @babel/plugin-proposal-class-properties@7.18.6 @babel/plugin-proposal-object-rest-spread@7.20.7 --save-dev
          npm install -g @babel/cli@7.24.0

      - name: 检查依赖安装
        run: |
          echo "检查依赖安装..."
          npm list @babel/plugin-transform-modules-commonjs
          npm list @babel/core
          npm list babel-jest

      - name: 设置配置文件
        run: |
          echo "创建babel.config.js..."
          cat > babel.config.js << 'EOL'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' }, modules: 'commonjs' }],
              '@babel/preset-typescript'
            ],
            plugins: [
              '@babel/plugin-transform-modules-commonjs',
              '@babel/plugin-transform-runtime',
              '@babel/plugin-proposal-class-properties',
              '@babel/plugin-proposal-object-rest-spread'
            ]
          };
          EOL

          echo "创建jest.config.js..."
          cat > jest.config.js << 'EOL'
          module.exports = {
            testEnvironment: 'node',
            transform: {
              '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { configFile: './babel.config.js' }],
            },
            moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json', 'node'],
            testMatch: ['**/__tests__/**/*.[jt]s?(x)', '**/?(*.)+(spec|test).[jt]s?(x)'],
            coveragePathIgnorePatterns: ['/node_modules/', '/dist/'],
            transformIgnorePatterns: [
              '/node_modules/(?!(@opentelemetry|ethers|uuid|zod|mongoose|axios|redis|ioredis|telegraf|ts-retry-promise|prom-client)/)',
            ],
            testTimeout: 30000,
            verbose: true,
            forceExit: true,
            detectOpenHandles: true,
          };
          EOL

          echo "创建.npmrc文件..."
          cat > .npmrc << 'EOL'
          registry=https://registry.npmjs.org/
          @babel:registry=https://registry.npmjs.org/
          legacy-peer-deps=true
          prefer-offline=true
          EOL

      - name: 创建简单测试文件
        run: |
          echo "创建简单测试文件..."
          mkdir -p src/tests/unit
          cat > src/tests/unit/simple.test.js << 'EOL'
          describe('简单测试', () => {
            it('应该通过', () => {
              expect(true).toBe(true);
            });
          });
          EOL

      - name: 验证模块可用性
        run: |
          echo "验证模块可用性..."
          node -e "
            try {
              console.log('检查 @babel/plugin-transform-modules-commonjs...');
              const plugin = require('@babel/plugin-transform-modules-commonjs');
              console.log('模块类型:', typeof plugin);
              
              console.log('检查 @babel/core...');
              const babel = require('@babel/core');
              console.log('Babel版本:', babel.version);
              
              console.log('检查 babel-jest...');
              const babelJest = require('babel-jest');
              console.log('babel-jest已加载');
              
              console.log('所有模块加载成功!');
            } catch(e) {
              console.error('模块加载失败:', e.message);
              console.error('错误堆栈:', e.stack);
              process.exit(1);
            }
          "

      - name: 运行简单测试
        run: |
          echo "运行简单测试..."
          npx jest src/tests/unit/simple.test.js --verbose
        env:
          CI: true
          NODE_ENV: test
          DEBUG: "jest,jest-worker,babel:*"
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: 运行所有测试
        run: |
          echo "运行所有测试..."
          npx jest --verbose
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker,babel:*"
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage/
