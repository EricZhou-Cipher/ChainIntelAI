name: 后端测试

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
          cache-dependency-path: backend/yarn.lock

      - name: 安装依赖
        run: |
          echo "安装依赖..."
          if [ -d "node_modules" ]; then
            rm -rf node_modules
          fi
          yarn install --frozen-lockfile

      - name: 安装显式包依赖
        run: |
          echo "安装显式包依赖..."
          npm install -g @babel/cli@7.24.0
          yarn add @babel/core@7.24.0 @babel/preset-env@7.24.0 @babel/plugin-transform-modules-commonjs@7.26.3 babel-jest@29.7.0 --dev --exact

      - name: 验证依赖安装
        run: |
          echo "验证依赖安装..."
          node -e "try { require('@babel/plugin-transform-modules-commonjs'); console.log('Babel插件已成功安装'); } catch(e) { console.error('插件安装失败:', e.message); process.exit(1); }"
          node -e "try { const babel = require('@babel/core'); console.log('Babel核心已成功安装, 版本:', babel.version); } catch(e) { console.error('Babel核心安装失败:', e.message); process.exit(1); }"

      - name: 设置Babel配置
        run: |
          echo "设置Babel配置..."
          cat > babel.config.js << 'EOL'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' }, modules: 'commonjs' }],
              '@babel/preset-typescript'
            ],
            plugins: [
              '@babel/plugin-transform-modules-commonjs',
              '@babel/plugin-transform-runtime',
              '@babel/plugin-proposal-class-properties',
              '@babel/plugin-proposal-object-rest-spread'
            ]
          };
          EOL

      - name: 设置Jest配置
        run: |
          echo "设置Jest配置..."
          cat > jest.config.js << 'EOL'
          module.exports = {
            testEnvironment: 'node',
            transform: {
              '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { configFile: './babel.config.js' }],
            },
            moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json', 'node'],
            testMatch: ['**/__tests__/**/*.[jt]s?(x)', '**/?(*.)+(spec|test).[jt]s?(x)'],
            coveragePathIgnorePatterns: ['/node_modules/', '/dist/'],
            transformIgnorePatterns: [
              '/node_modules/(?!(@opentelemetry|ethers|uuid|zod|mongoose|axios|redis|ioredis|telegraf|ts-retry-promise|@babel/plugin-transform-modules-commonjs|prom-client)/)',
            ],
            setupFilesAfterEnv: ['./jest.setup.js'],
            testTimeout: 30000,
            verbose: true,
            forceExit: true,
            detectOpenHandles: true,
            moduleNameMapper: {
              '^@/(.*)$': '<rootDir>/src/$1'
            },
          };
          EOL

      - name: 运行单个测试
        run: |
          echo "运行单个测试..."
          TEST_FILE=$(find src/tests/unit/profiling -name "*.test.js" -o -name "*.test.ts" | head -1)
          if [ -n "$TEST_FILE" ]; then
            echo "测试文件: $TEST_FILE"
            NODE_OPTIONS=--max-old-space-size=4096 npx jest --no-cache --runInBand --verbose $TEST_FILE
          else
            echo "未找到测试文件"
          fi
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker"
          BABEL_ENV: test
          NODE_PATH: ./node_modules

      - name: 运行所有测试
        run: |
          echo "运行所有测试..."
          NODE_OPTIONS=--max-old-space-size=4096 npx jest --no-cache --runInBand --verbose
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker"
          BABEL_ENV: test
          NODE_PATH: ./node_modules

      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage/
