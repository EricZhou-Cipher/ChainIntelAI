name: 后端测试

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: backend/package.json

      - name: 完全清理环境
        run: |
          echo "完全清理环境..."
          rm -rf node_modules package-lock.json yarn.lock .jest-cache
          rm -rf coverage .nyc_output
          rm -rf .babel-cache 
          # 确保删除所有可能的配置文件以避免冲突
          rm -f babel.config.js babel.config.cjs .babelrc jest.config.js jest.config.cjs jest.setup.js

      - name: 安装依赖
        run: |
          echo "安装项目依赖..."
          npm install --no-audit --no-fund

          # 显示安装的依赖
          npm list --depth=0

      - name: 直接安装关键Babel依赖
        run: |
          echo "直接安装Babel关键依赖..."

          # 安装关键Babel依赖到项目根目录
          npm install --save-dev @babel/core@7.24.0 @babel/preset-env@7.24.0 @babel/preset-typescript@7.23.3 babel-jest@29.7.0

          # 特别安装关键插件
          npm install --save-dev @babel/plugin-transform-modules-commonjs@7.26.3
          npm install --save-dev @babel/plugin-transform-runtime@7.24.0 @babel/plugin-proposal-class-properties@7.18.6 @babel/plugin-proposal-object-rest-spread@7.20.7

          # 安装相关的运行时
          npm install --save @babel/runtime@7.24.0

          # 全局安装babel-cli以确保可用
          npm install -g @babel/cli@7.24.0

          # 验证安装
          echo "检查安装的依赖版本..."
          npm list @babel/plugin-transform-modules-commonjs
          npm list @babel/core
          npm list babel-jest

          # 确保依赖已被记录在package.json中
          echo "package.json内容:"
          cat package.json | grep babel

      - name: 设置特殊配置文件
        run: |
          echo "创建特殊配置文件..."

          # 创建专门用于CI环境的babel配置
          cat > babel.config.js << 'EOL'
          // CI环境专用Babel配置
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' }, modules: 'commonjs' }],
              '@babel/preset-typescript'
            ],
            plugins: [
              '@babel/plugin-transform-modules-commonjs',
              '@babel/plugin-transform-runtime',
              '@babel/plugin-proposal-class-properties',
              '@babel/plugin-proposal-object-rest-spread'
            ],
            sourceMaps: 'inline',
            sourceType: 'unambiguous',
            comments: false,
            compact: false,
          };
          EOL

          # 创建专门用于CI环境的Jest配置
          cat > jest.config.js << 'EOL'
          // CI环境专用Jest配置
          module.exports = {
            testEnvironment: 'node',
            transform: {
              '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { configFile: './babel.config.js' }],
            },
            moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json', 'node'],
            testMatch: ['**/__tests__/**/*.[jt]s?(x)', '**/?(*.)+(spec|test).[jt]s?(x)'],
            coveragePathIgnorePatterns: ['/node_modules/', '/dist/'],
            transformIgnorePatterns: [
              'node_modules/(?!(@opentelemetry|ethers|uuid|zod|mongoose|axios|redis|ioredis|telegraf|ts-retry-promise|prom-client)/)',
            ],
            testTimeout: 30000,
            verbose: true,
            forceExit: true,
            detectOpenHandles: true,
          };
          EOL

          # 创建简单的Jest设置文件
          cat > jest.setup.js << 'EOL'
          console.log('CI环境Jest设置加载中...');
          jest.setTimeout(30000);
          process.env.NODE_ENV = 'test';

          // 预加载关键模块
          try {
            console.log('测试加载@babel/plugin-transform-modules-commonjs...');
            const plugin = require('@babel/plugin-transform-modules-commonjs');
            console.log('成功加载模块!');
          } catch (err) {
            console.error('无法加载模块!', err.message);
            process.exit(1);
          }
          EOL

          echo "配置文件已创建，内容如下:"
          echo "=== babel.config.js ==="
          cat babel.config.js
          echo "=== jest.config.js ==="
          cat jest.config.js

      - name: 检查模块可用性
        run: |
          echo "检查关键模块是否可用..."

          # 使用Node.js加载关键模块来验证
          node -e "
            try {
              console.log('检查 @babel/plugin-transform-modules-commonjs...');
              const pluginPath = require.resolve('@babel/plugin-transform-modules-commonjs');
              console.log('插件路径:', pluginPath);
              const plugin = require('@babel/plugin-transform-modules-commonjs');
              console.log('模块类型:', typeof plugin);
              
              console.log('检查 @babel/core...');
              const babel = require('@babel/core');
              console.log('Babel版本:', babel.version);
              
              console.log('检查 babel-jest...');
              const babelJest = require('babel-jest');
              console.log('babel-jest已加载');
              
              console.log('所有模块加载成功!');
            } catch(e) {
              console.error('模块加载失败:', e.message);
              console.error('错误堆栈:', e.stack);
              console.log('模块搜索路径:', module.paths);
              process.exit(1);
            }
          "

          # 显示node_modules目录结构，特别是@babel目录
          echo "查看node_modules/@babel目录..."
          ls -la node_modules/@babel || echo "@babel目录不存在"
          ls -la node_modules/@babel/plugin-transform-modules-commonjs || echo "plugin-transform-modules-commonjs目录不存在"

      - name: 运行简单测试
        run: |
          echo "运行简单测试以验证配置..."

          # 确保测试目录存在
          mkdir -p src/tests/unit

          # 创建简单测试文件
          cat > src/tests/unit/simple.test.js << 'EOL'
          describe('简单测试', () => {
            it('应该通过', () => {
              expect(true).toBe(true);
            });
          });
          EOL

          # 运行简单测试，不带覆盖率收集以验证基本功能
          NODE_ENV=test DEBUG=jest,babel:* npx jest src/tests/unit/simple.test.js --verbose

      - name: 运行所有测试
        run: |
          echo "运行所有测试..."
          NODE_ENV=test npx jest --config=jest.config.js --verbose
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker,babel:*"
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage/
