name: 后端测试

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
          cache-dependency-path: backend/yarn.lock

      - name: 删除node_modules（如果存在）
        run: |
          if [ -d "node_modules" ]; then
            rm -rf node_modules
          fi

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 安装Babel插件
        run: |
          yarn add --dev @babel/core @babel/preset-env @babel/plugin-transform-modules-commonjs babel-jest

      - name: 显示安装的依赖
        run: |
          yarn list @babel/plugin-transform-modules-commonjs
          yarn list babel-jest
          yarn list @babel/core

      # 检查是否有测试源文件
      - name: 检查测试文件
        run: |
          find tests -name "*.test.js" -o -name "*.test.ts" | sort
          find src -name "*.test.js" -o -name "*.test.ts" | sort

      # 检查配置文件是否存在
      - name: 检查配置文件
        run: |
          ls -la jest.config.cjs
          ls -la babel.config.cjs
          ls -la jest.setup.js
          echo "Jest配置内容:"
          cat jest.config.cjs
          echo "Babel配置内容:"
          cat babel.config.cjs

      # 先运行一个特定测试看看是否成功
      - name: 运行单个测试
        run: |
          TEST_FILE=$(find tests -name "*.test.js" -o -name "*.test.ts" | head -1)
          if [ -n "$TEST_FILE" ]; then
            echo "尝试运行单个测试: $TEST_FILE"
            yarn jest --no-cache --runInBand --verbose $TEST_FILE
          else
            echo "未找到测试文件"
          fi
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker"

      - name: 运行测试
        run: yarn test --no-cache --runInBand --verbose
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker"

      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: backend/coverage/
