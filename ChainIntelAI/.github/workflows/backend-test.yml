name: 后端测试

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      # MongoDB服务
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis服务
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          cache-dependency-path: backend/package.json

      - name: 完全清理环境
        run: |
          echo "完全清理环境..."
          rm -rf node_modules package-lock.json yarn.lock
          rm -rf coverage .nyc_output
          rm -f babel.config.js babel.config.cjs .babelrc jest.config.js jest.config.cjs jest.setup.js
          rm -f babel-virtual-resolve-base.js babel-resolver.js

      - name: 安装依赖
        run: |
          echo "安装项目依赖..."
          npm install --no-audit --no-fund

          # 显示安装的依赖
          npm list --depth=0

      - name: 全局安装关键依赖
        run: |
          echo "全局安装关键依赖..."
          npm install -g @babel/core@7.24.0 @babel/preset-env@7.24.0 @babel/preset-typescript@7.23.3 babel-jest@29.7.0
          npm install -g @babel/plugin-transform-modules-commonjs@7.26.3

          # 验证安装
          npm list -g @babel/plugin-transform-modules-commonjs

      - name: 创建特殊配置
        run: |
          echo "创建特殊配置..."

          # 创建babel.config.js
          cat > babel.config.js << 'EOL'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' } }],
              '@babel/preset-typescript'
            ],
            plugins: [
              '@babel/plugin-transform-modules-commonjs'
            ]
          };
          EOL

          # 创建.babelrc (备用)
          cat > .babelrc << 'EOL'
          {
            "presets": [
              ["@babel/preset-env", { "targets": { "node": "current" } }],
              "@babel/preset-typescript"
            ],
            "plugins": ["@babel/plugin-transform-modules-commonjs"]
          }
          EOL

          # 创建jest.config.js
          cat > jest.config.js << 'EOL'
          module.exports = {
            testEnvironment: "node",
            transform: {
              "^.+\\.(js|jsx|ts|tsx)$": "babel-jest"
            },
            transformIgnorePatterns: []
          };
          EOL

      - name: 直接修复node_modules
        run: |
          echo "直接修复node_modules..."

          # 确保@babel/plugin-transform-modules-commonjs存在
          mkdir -p node_modules/@babel/plugin-transform-modules-commonjs

          # 如果目录为空，则从全局复制
          if [ ! "$(ls -A node_modules/@babel/plugin-transform-modules-commonjs)" ]; then
            echo "复制全局模块到本地..."
            cp -r $(npm root -g)/@babel/plugin-transform-modules-commonjs/* node_modules/@babel/plugin-transform-modules-commonjs/
          fi

          # 验证模块存在
          ls -la node_modules/@babel/plugin-transform-modules-commonjs

      - name: 创建测试文件
        run: |
          echo "创建简单测试文件..."
          mkdir -p src/tests/unit
          cat > src/tests/unit/simple.test.js << 'EOL'
          describe('简单测试', () => {
            it('应该通过', () => {
              expect(true).toBe(true);
            });
          });
          EOL

      - name: 使用不同方式运行测试
        run: |
          echo "使用不同方式运行测试..."

          # 方法1: 使用NODE_PATH
          NODE_PATH=./node_modules:$(npm root -g) npx jest src/tests/unit/simple.test.js --no-cache

          # 方法2: 使用babel-node
          npm install -g @babel/node
          npx babel-node node_modules/.bin/jest src/tests/unit/simple.test.js --no-cache

          # 方法3: 使用ts-node
          npm install -g ts-node
          NODE_OPTIONS="--max-old-space-size=4096" npx ts-node node_modules/.bin/jest src/tests/unit/simple.test.js --no-cache
        env:
          CI: true
          NODE_ENV: test
          DEBUG: "jest,jest-worker,babel:*"

      - name: 跳过覆盖率收集运行测试
        run: |
          echo "跳过覆盖率收集运行测试..."
          NODE_ENV=test npx jest --no-coverage --verbose
        env:
          CI: true
          NODE_ENV: test
          JWT_SECRET: test_secret
          MONGO_URI: mongodb://localhost:27017/chainintelai_test
          DEBUG: "jest,jest-worker,babel:*"
          NODE_OPTIONS: "--max-old-space-size=4096"
