name: Backend CI/CD Minimal - 极简测试

on:
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: false

      - name: 极简环境准备
        run: |
          # 清理所有可能的干扰项
          rm -rf node_modules package-lock.json yarn.lock
          rm -rf jest.config.js babel.config.js tsconfig.json
          rm -rf .yarn .yarnrc .npmrc

          # 展示干净的环境
          ls -la

      - name: 创建独立测试
        run: |
          # 创建一个不依赖任何测试框架的简单测试文件
          echo 'console.log("开始独立测试"); const sum = (a, b) => a + b; if(sum(1, 1) === 2) { console.log("✅ 测试通过"); process.exit(0); } else { console.log("❌ 测试失败"); process.exit(1); }' > pure-test.js

          # 运行独立测试
          node pure-test.js

          # 创建一个具有Babel环境的最小测试
          mkdir -p minimal-test
          cd minimal-test

          # 创建package.json
          echo '{"name":"minimal-test","version":"1.0.0","private":true}' > package.json

          # 安装最小依赖集合
          npm init -y
          npm install --save-dev jest babel-jest @babel/core @babel/preset-env

          # 创建babel.config.js
          echo 'module.exports = { presets: ["@babel/preset-env"] };' > babel.config.js

          # 创建最简jest配置
          echo 'module.exports = { testEnvironment: "node", transform: { "^.+\\.js$": "babel-jest" } };' > jest.config.js

          # 创建测试文件
          echo 'test("1+1=2", () => { expect(1+1).toBe(2); });' > simple.test.js

          # 运行测试
          npx jest --no-cache

      - name: 验证Babel配置
        run: |
          cd minimal-test

          # 安装所有必要的Babel依赖
          npm install --save-dev @babel/plugin-transform-modules-commonjs

          # 确认Babel插件已安装
          echo "Babel插件安装状态："
          npm list @babel/plugin-transform-modules-commonjs

          # 创建明确依赖该插件的配置
          echo 'module.exports = { presets: ["@babel/preset-env"], plugins: ["@babel/plugin-transform-modules-commonjs"] };' > babel.config.js

          # 创建使用ESM语法的测试文件
          echo 'import { expect, test } from "@jest/globals"; test("ESM语法测试", () => { expect(1+1).toBe(2); });' > esm.test.js

          # 运行ESM测试
          npx jest esm.test.js --no-cache

      - name: 直接检查模块路径
        run: |
          # 在最小化环境中执行Node脚本，检查模块路径解析
          cd minimal-test
          echo 'try { console.log("模块路径:", require.resolve("@babel/plugin-transform-modules-commonjs")); } catch(e) { console.error("无法解析模块路径:", e.message); process.exit(1); }' > check-module.js

          # 运行检查
          node check-module.js
