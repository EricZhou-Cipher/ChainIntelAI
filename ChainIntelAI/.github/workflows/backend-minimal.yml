name: Backend CI/CD Minimal

on:
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "yarn"
          cache-dependency-path: backend/yarn.lock

      - name: 显示环境信息
        run: |
          node -v
          yarn -v
          ls -la
          pwd
          echo "GitHub Actions环境信息："
          env | grep -E "GITHUB|NODE|PATH|RUNNER"

      - name: 安装依赖
        run: |
          echo "使用yarn安装依赖..."
          yarn install --frozen-lockfile

          echo "确保ts-jest和相关依赖已安装..."
          yarn add --dev ts-jest @types/jest typescript

          echo "显示已安装的依赖版本："
          yarn list | grep -E "jest|typescript"

      - name: 创建tsconfig.json
        run: |
          cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2018",
              "module": "CommonJS",
              "moduleResolution": "node",
              "esModuleInterop": true,
              "strict": true,
              "skipLibCheck": true,
              "forceConsistentCasingInFileNames": true,
              "outDir": "dist",
              "declaration": true,
              "sourceMap": true
            },
            "include": ["src/**/*"],
            "exclude": ["node_modules", "dist"]
          }
          EOF
          echo "创建的tsconfig.json内容："
          cat tsconfig.json

      - name: 创建jest.config.js
        run: |
          cat > jest.config.js << 'EOF'
          /** @type {import('ts-jest').JestConfigWithTsJest} */
          module.exports = {
            preset: 'ts-jest',
            testEnvironment: 'node',
            transform: {
              '^.+\\.tsx?$': ['ts-jest', { tsconfig: 'tsconfig.json' }],
              '^.+\\.jsx?$': ['babel-jest', { configFile: './babel.config.js' }]
            },
            transformIgnorePatterns: [],
            moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
            testMatch: ['**/tests/**/*.test.ts', '**/tests/**/*.test.js', '**/src/tests/unit/*.test.js', '**/src/tests/unit/*.test.ts'],
            moduleNameMapper: {
              '^@/(.*)$': '<rootDir>/$1'
            }
          };
          EOF
          echo "创建的jest.config.js内容："
          cat jest.config.js

      - name: 创建babel.config.js
        run: |
          cat > babel.config.js << 'EOF'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' } }]
            ]
          };
          EOF
          echo "创建的babel.config.js内容："
          cat babel.config.js

      - name: 创建测试文件
        run: |
          mkdir -p src/tests/unit
          echo 'describe("基本JS测试", () => { test("1+1=2", () => { expect(1+1).toBe(2); }); });' > src/tests/unit/basic.test.js
          echo 'describe("基本TS测试", () => { test("1+1=2", () => { expect(1+1).toBe(2); }); });' > src/tests/unit/basic.test.ts

      - name: 显示Jest配置
        run: |
          echo "显示Jest配置信息..."
          NODE_OPTIONS=--no-warnings yarn jest --showConfig

      - name: 运行TypeScript测试
        run: |
          echo "运行TypeScript测试..."
          NODE_OPTIONS="--max-old-space-size=4096 --no-warnings" yarn jest src/tests/unit/basic.test.ts --no-cache --verbose
        env:
          NODE_ENV: test

      - name: 运行JavaScript测试
        run: |
          echo "运行JavaScript测试..."
          NODE_OPTIONS="--max-old-space-size=4096 --no-warnings" yarn jest src/tests/unit/basic.test.js --no-cache --verbose
        env:
          NODE_ENV: test

      - name: 启用SSH调试
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
