name: Backend CI/CD Minimal

on:
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.3
          cache: "yarn"
          cache-dependency-path: backend/yarn.lock

      - name: 显示环境信息
        run: |
          node -v
          yarn -v
          ls -la
          pwd
          echo "GitHub Actions环境信息："
          env | grep -E "GITHUB|NODE|PATH|RUNNER"

      - name: 检查和升级Jest相关依赖
        run: |
          echo "当前Jest相关依赖版本："
          yarn list jest @babel/core babel-jest @babel/plugin-transform-modules-commonjs

          echo "升级Jest相关依赖到最新版本："
          yarn add --dev jest@latest @babel/core@latest babel-jest@latest @babel/preset-env@latest @babel/preset-typescript@latest @babel/plugin-transform-modules-commonjs@latest @babel/runtime@latest @babel/plugin-transform-runtime@latest

          echo "升级后的版本："
          yarn list jest @babel/core babel-jest @babel/plugin-transform-modules-commonjs

      - name: 清理缓存
        run: |
          echo "清理Jest缓存..."
          yarn jest --clearCache || true

          echo "清理node_modules缓存..."
          rm -rf node_modules/.cache || true

      - name: 创建完整的Babel配置
        run: |
          cat > babel.config.js << 'EOF'
          module.exports = {
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' } }],
              '@babel/preset-typescript'
            ],
            plugins: [
              '@babel/plugin-transform-modules-commonjs',
              '@babel/plugin-transform-runtime'
            ]
          };
          EOF

          echo "Babel配置内容："
          cat babel.config.js

      - name: 创建完整的Jest配置
        run: |
          cat > jest.config.js << 'EOF'
          module.exports = {
            testEnvironment: 'node',
            transform: {
              '^.+\\.(ts|tsx|js|jsx)$': ['babel-jest', { configFile: './babel.config.js' }]
            },
            moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
            transformIgnorePatterns: [],
            modulePathIgnorePatterns: ['<rootDir>/dist/'],
            testPathIgnorePatterns: ['/node_modules/'],
            verbose: true,
            testTimeout: 30000,
            forceExit: true
          };
          EOF

          echo "Jest配置内容："
          cat jest.config.js

      - name: 创建简单测试文件
        run: |
          mkdir -p src/tests/unit

          # JavaScript测试文件
          echo 'describe("基本JS测试", () => { test("1+1=2", () => { expect(1+1).toBe(2); }); });' > src/tests/unit/basic.test.js

          # TypeScript测试文件
          echo 'describe("基本TS测试", () => { test("1+1=2", () => { expect(1+1).toBe(2); }); });' > src/tests/unit/basic.test.ts

      - name: 显示package.json内容
        run: |
          echo "package.json内容："
          cat package.json

      - name: 运行简单测试
        run: |
          echo "运行JavaScript测试..."
          NODE_OPTIONS="--max-old-space-size=4096" yarn jest src/tests/unit/basic.test.js --no-cache

          echo "运行TypeScript测试..."
          NODE_OPTIONS="--max-old-space-size=4096" yarn jest src/tests/unit/basic.test.ts --no-cache
        env:
          NODE_ENV: test
          BABEL_ENV: test

      - name: 尝试运行项目测试
        run: |
          echo "尝试运行项目测试..."
          NODE_OPTIONS="--max-old-space-size=4096" yarn jest --no-cache --runInBand --verbose
        env:
          NODE_ENV: test
          BABEL_ENV: test

      - name: 显示依赖树和模块解析路径
        run: |
          echo "依赖树："
          yarn list --depth=0

          echo "模块解析路径："
          node -e "console.log('模块解析路径:', module.paths)"

          echo "尝试解析关键模块："
          node -e "try { console.log('@babel/core路径:', require.resolve('@babel/core')); } catch(e) { console.error('找不到@babel/core:', e.message); }"
          node -e "try { console.log('babel-jest路径:', require.resolve('babel-jest')); } catch(e) { console.error('找不到babel-jest:', e.message); }"
          node -e "try { console.log('@babel/plugin-transform-modules-commonjs路径:', require.resolve('@babel/plugin-transform-modules-commonjs')); } catch(e) { console.error('找不到@babel/plugin-transform-modules-commonjs:', e.message); }"
