name: Backend CI/CD Minimal

on:
  push:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.3
          cache: "yarn"
          cache-dependency-path: backend/yarn.lock

      - name: 显示环境信息
        run: |
          node -v
          yarn -v
          ls -la
          pwd
          echo "GitHub Actions环境信息："
          env | grep -E "GITHUB|NODE|PATH|RUNNER"

      - name: 安装依赖
        run: yarn install --frozen-lockfile --verbose

      - name: 验证包安装
        run: |
          echo "验证关键依赖安装："
          node -e "console.log('@babel/plugin-transform-modules-commonjs 版本:', require('@babel/plugin-transform-modules-commonjs/package.json').version)"
          node -e "console.log('@babel/core 版本:', require('@babel/core/package.json').version)"
          node -e "console.log('babel-jest 版本:', require('babel-jest/package.json').version)"
          node -e "console.log('jest 版本:', require('jest/package.json').version)"

      - name: 检查 node_modules
        run: |
          echo "检查 @babel 目录："
          ls -la node_modules/@babel
          echo "检查 plugin-transform-modules-commonjs 目录："
          ls -la node_modules/@babel/plugin-transform-modules-commonjs || echo "目录不存在"

      - name: 清理缓存
        run: |
          echo "清理Jest缓存..."
          yarn jest --clearCache || true

          echo "清理node_modules缓存..."
          rm -rf node_modules/.cache || true

      - name: 显示现有配置文件
        run: |
          echo "显示现有的babel.config.js内容："
          cat babel.config.js || echo "babel.config.js不存在"

          echo "显示现有的jest.config.js内容："
          cat jest.config.js || echo "jest.config.js不存在"

          echo "显示现有的tsconfig.json内容："
          cat tsconfig.json || echo "tsconfig.json不存在"

      - name: 创建TypeScript配置
        run: |
          if [ ! -f "tsconfig.json" ]; then
            cat > tsconfig.json << 'EOF'
            {
              "compilerOptions": {
                "target": "ES6",
                "module": "CommonJS",
                "moduleResolution": "node",
                "esModuleInterop": true,
                "strict": true,
                "skipLibCheck": true,
                "forceConsistentCasingInFileNames": true,
                "outDir": "dist",
                "declaration": true,
                "sourceMap": true
              },
              "include": ["src/**/*"],
              "exclude": ["node_modules", "dist"]
            }
            EOF
            echo "创建了新的tsconfig.json"
          else
            echo "使用现有的tsconfig.json"
          fi

      - name: 创建简单测试文件
        run: |
          mkdir -p src/tests/unit

          # JavaScript测试文件
          echo 'describe("基本JS测试", () => { test("1+1=2", () => { expect(1+1).toBe(2); }); });' > src/tests/unit/basic.test.js

          # TypeScript测试文件
          cat > src/tests/unit/basic.test.ts << 'EOF'
          // 基本TypeScript测试文件
          describe("基本TS测试", () => { 
            test("1+1=2", () => { 
              expect(1+1).toBe(2); 
            }); 
          });
          EOF

      - name: 显示package.json内容
        run: |
          echo "package.json内容："
          cat package.json

      - name: 运行简单测试
        run: |
          echo "运行JavaScript测试..."
          NODE_OPTIONS="--max-old-space-size=4096" yarn jest src/tests/unit/basic.test.js --no-cache --verbose

          echo "运行TypeScript测试..."
          NODE_OPTIONS="--max-old-space-size=4096" yarn jest src/tests/unit/basic.test.ts --no-cache --verbose
        env:
          NODE_ENV: test
          BABEL_ENV: test

      - name: 尝试运行项目测试
        run: |
          echo "尝试运行项目测试..."
          NODE_OPTIONS="--max-old-space-size=4096" yarn jest --no-cache --runInBand --verbose
        env:
          NODE_ENV: test
          BABEL_ENV: test

      - name: 显示依赖树和模块解析路径
        run: |
          echo "依赖树："
          yarn list --depth=0

          echo "模块解析路径："
          node -e "console.log('模块解析路径:', module.paths)"

          echo "尝试解析关键模块："
          node -e "try { console.log('@babel/core路径:', require.resolve('@babel/core')); } catch(e) { console.error('找不到@babel/core:', e.message); }"
          node -e "try { console.log('babel-jest路径:', require.resolve('babel-jest')); } catch(e) { console.error('找不到babel-jest:', e.message); }"
          node -e "try { console.log('@babel/plugin-transform-modules-commonjs路径:', require.resolve('@babel/plugin-transform-modules-commonjs')); } catch(e) { console.error('找不到@babel/plugin-transform-modules-commonjs:', e.message); }"

      - name: Debug 运行环境
        uses: mxschmitt/action-tmate@v3
        if: failure()
        with:
          limit-access-to-actor: true
